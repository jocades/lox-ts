[AST] [
  FunctionStmt {
    name: Token {
      type: 22,
      lexeme: "what",
      literal: null,
      line: 1,
    },
    fn: FunctionExpr {
      params: [],
      body: [
        ClassStmt {
          name: Token {
            type: 22,
            lexeme: "Idk",
            literal: null,
            line: 2,
          },
          superclass: null,
          methods: [
            FunctionStmt {
              name: Token {
                type: 22,
                lexeme: "init",
                literal: null,
                line: 3,
              },
              fn: FunctionExpr {
                params: [],
                body: [
                  [Object ...]
                ],
                accept: [Function: accept],
              },
              accept: [Function: accept],
            }
          ],
          accept: [Function: accept],
        }, ReturnStmt {
          keyword: Token {
            type: 37,
            lexeme: "return",
            literal: null,
            line: 8,
          },
          value: VariableExpr {
            name: Token {
              type: 22,
              lexeme: "Idk",
              literal: null,
              line: 8,
            },
            accept: [Function: accept],
          },
          accept: [Function: accept],
        }
      ],
      accept: [Function: accept],
    },
    accept: [Function: accept],
  }, LetStmt {
    name: Token {
      type: 22,
      lexeme: "inst",
      literal: null,
      line: 11,
    },
    initializer: CallExpr {
      callee: CallExpr {
        callee: VariableExpr {
          name: Token {
            type: 22,
            lexeme: "what",
            literal: null,
            line: 11,
          },
          accept: [Function: accept],
        },
        paren: Token {
          type: 1,
          lexeme: ")",
          literal: null,
          line: 11,
        },
        args: [],
        accept: [Function: accept],
      },
      paren: Token {
        type: 1,
        lexeme: ")",
        literal: null,
        line: 11,
      },
      args: [],
      accept: [Function: accept],
    },
    accept: [Function: accept],
  }, EchoStmt {
    expression: VariableExpr {
      name: Token {
        type: 22,
        lexeme: "inst",
        literal: null,
        line: 12,
      },
      accept: [Function: accept],
    },
    accept: [Function: accept],
  }, FunctionStmt {
    name: Token {
      type: 22,
      lexeme: "test",
      literal: null,
      line: 14,
    },
    fn: FunctionExpr {
      params: [],
      body: [
        FunctionStmt {
          name: Token {
            type: 22,
            lexeme: "init",
            literal: null,
            line: 15,
          },
          fn: FunctionExpr {
            params: [],
            body: [
              ExpressionStmt {
                expression: SetExpr {
                  object: [Object ...],
                  name: [Object ...],
                  value: [Object ...],
                  accept: [Function: accept],
                },
                accept: [Function: accept],
              }
            ],
            accept: [Function: accept],
          },
          accept: [Function: accept],
        }, ReturnStmt {
          keyword: Token {
            type: 37,
            lexeme: "return",
            literal: null,
            line: 19,
          },
          value: VariableExpr {
            name: Token {
              type: 22,
              lexeme: "init",
              literal: null,
              line: 19,
            },
            accept: [Function: accept],
          },
          accept: [Function: accept],
        }
      ],
      accept: [Function: accept],
    },
    accept: [Function: accept],
  }, ExpressionStmt {
    expression: CallExpr {
      callee: CallExpr {
        callee: VariableExpr {
          name: Token {
            type: 22,
            lexeme: "test",
            literal: null,
            line: 22,
          },
          accept: [Function: accept],
        },
        paren: Token {
          type: 1,
          lexeme: ")",
          literal: null,
          line: 22,
        },
        args: [],
        accept: [Function: accept],
      },
      paren: Token {
        type: 1,
        lexeme: ")",
        literal: null,
        line: 22,
      },
      args: [],
      accept: [Function: accept],
    },
    accept: [Function: accept],
  }
]
Idk instance
